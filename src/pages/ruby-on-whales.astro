---
import MainLayout from '../layouts/MainLayout.astro';
import { getEntry } from 'astro:content';

const guideEntry = await getEntry('docs', 'ruby-on-whales');

if (!guideEntry) {
  throw new Error("Could not find ruby-on-whales document in content collection");
}

const { Content } = await guideEntry.render();
---

<MainLayout 
  title="Ruby on Whales!" 
  description="A guide to Ruby and Docker from a pirate perspective"
  ogImage="/images/lfp2-og.jpg"
>
  <div class="container mx-auto px-4 py-8">
    <div class="markdown-content overflow-hidden w-full dark:bg-[#080f1d]">
      <Content />
    </div>
  </div>
</MainLayout>

<script is:inline>
  // Make external links open in new tabs
  document.addEventListener('DOMContentLoaded', () => {
    const externalLinks = document.querySelectorAll('.markdown-content a[href^="http"]');
    externalLinks.forEach(link => {
      if (!link.hasAttribute('target')) {
        link.setAttribute('target', '_blank');
        link.setAttribute('rel', 'noopener noreferrer');
      }
    });
  });
  
  // Process command line code blocks to style prefixes - simpler on mobile
  const isMobile = window.innerWidth <= 768;

  // Process command line code blocks to style prefixes - simpler on mobile
  document.addEventListener('DOMContentLoaded', () => {
    // On mobile, use simplified code without wrapper creation and animations
    if (isMobile) {
      // Do minimal styling only
      const commandBlocks = document.querySelectorAll('pre code.language-bash, pre code.language-sh');
      commandBlocks.forEach(block => {
        const content = block.innerHTML;
        // Replace common command line prefixes with styled spans
        const processedContent = content
          .replace(/^(\$ )/gm, '<span class="command-line-prefix">$</span>')
          .replace(/^(> )/gm, '<span class="command-line-prefix">></span>')
          .replace(/^(# )/gm, '<span class="command-line-prefix">#</span>');
        
        block.innerHTML = processedContent;
      });
      return;
    }
    
    // Desktop - full styling
    // Style command line prefixes
    const commandBlocks = document.querySelectorAll('pre code.language-bash, pre code.language-sh');
    
    commandBlocks.forEach(block => {
      const content = block.innerHTML;
      // Replace common command line prefixes with styled spans
      const processedContent = content
        .replace(/^(\$ )/gm, '<span class="command-line-prefix">$</span>')
        .replace(/^(> )/gm, '<span class="command-line-prefix">></span>')
        .replace(/^(# )/gm, '<span class="command-line-prefix">#</span>');
      
      block.innerHTML = processedContent;
    });

    // Fix inconsistent styling between pages - SKIP ON MOBILE
    document.querySelectorAll('.markdown-content pre, .prose pre').forEach(pre => {
      if (!pre.parentElement.classList.contains('code-block-wrapper')) {
        // If this pre isn't already wrapped, wrap it
        const code = pre.querySelector('code');
        if (code) {
          // Create wrapper
          const wrapper = document.createElement('div');
          wrapper.className = 'code-block-wrapper';
          
          // Create header
          const header = document.createElement('div');
          header.className = 'code-header';
          
          // Create copy button
          const copyBtn = document.createElement('button');
          copyBtn.className = 'copy-button';
          copyBtn.textContent = 'Copy';
          copyBtn.addEventListener('click', () => {
            const text = code.textContent || '';
            navigator.clipboard.writeText(text).then(() => {
              copyBtn.textContent = 'Copied!';
              copyBtn.classList.add('copied');
              setTimeout(() => {
                copyBtn.textContent = 'Copy';
                copyBtn.classList.remove('copied');
              }, 2000);
            });
          });
          
          // Assemble the elements
          header.appendChild(copyBtn);
          
          // Replace the pre with our wrapper structure
          pre.parentNode.insertBefore(wrapper, pre);
          wrapper.appendChild(header);
          wrapper.appendChild(pre);
        }
      }
    });
  });
</script>

<style is:global>
  /* Remove all page-specific style overrides - we'll use global.css for everything */
  /* This ensures consistency between pages */
</style> 