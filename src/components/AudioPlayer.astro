---
// Get all mp3 files
const audioFiles = [
  {
    title: "Linux for Pirates!",
    file: "/linux-for-pirates.mp3"
  },
  {
    title: "Ruby on Whales",
    file: "/ruby-on-whales.mp3"
  },
  {
    title: "Kube of the Kraken",
    file: "/kube-of-the-kraken.mp3"
  },
  {
    title: "Swartz of the Shadows",
    file: "/swartz-of-the-shadows.mp3"
  }
];
---

<div class="audio-player bg-white dark:bg-[#080f1d] border border-slate-200 dark:border-[#0d1a2f] shadow-sm py-5 px-4">
  <div class="max-w-2xl mx-auto">
    <div class="text-center mb-3">
      <h3 id="current-song" class="text-[#8f36e6] dark:text-[#a3fe0d] font-medium text-base">Linux for Pirates!</h3>
    </div>
    
    <div class="flex items-center justify-center space-x-6 mb-4">
      <!-- Previous button -->
      <button id="prev-btn" class="text-white focus:outline-none">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
          <path d="M6 6h2v12H6zm3.5 6l8.5 6V6z"/>
        </svg>
      </button>
      
      <!-- Play/Pause button -->
      <button id="play-btn" class="w-11 h-11 rounded-md bg-[#8f36e6] dark:bg-[#a3fe0d] hover:bg-[#7d25d4] dark:hover:bg-[#93ee01] text-white dark:text-[#080f1d] flex items-center justify-center focus:outline-none">
        <svg xmlns="http://www.w3.org/2000/svg" id="play-icon" class="h-6 w-6" viewBox="0 0 24 24" fill="currentColor">
          <path d="M8 5v14l11-7z"/>
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" id="pause-icon" class="h-6 w-6 hidden" viewBox="0 0 24 24" fill="currentColor">
          <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
        </svg>
      </button>
      
      <!-- Next button -->
      <button id="next-btn" class="text-white focus:outline-none">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
          <path d="M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z"/>
        </svg>
      </button>
    </div>
    
    <div class="flex items-center justify-between space-x-4 mb-3">
      <span id="time-display" class="text-[#a0a0a0] text-sm min-w-[40px]">0:00</span>
      
      <div class="flex-1 relative h-1 bg-[#333333]">
        <input type="range" id="progress-bar" min="0" max="100" value="0" class="absolute inset-0 w-full h-full opacity-0 cursor-pointer z-10">
        <div id="progress-indicator" class="h-1 bg-[#8f36e6] dark:bg-[#a3fe0d]" style="width: 0%"></div>
      </div>
      
      <span id="duration-display" class="text-[#a0a0a0] text-sm min-w-[40px]">4:00</span>
    </div>
    
    <div class="flex items-center justify-between">
      <!-- Left controls -->
      <div class="flex items-center space-x-6">
        <button id="shuffle-btn" class="text-[#a0a0a0] hover:text-white focus:outline-none">
          <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="currentColor">
            <path d="M10.59 9.17L5.41 4 4 5.41l5.17 5.17 1.42-1.41zM14.5 4l2.04 2.04L4 18.59 5.41 20 17.96 7.46 20 9.5V4h-5.5zm.33 9.41l-1.41 1.41 3.13 3.13L14.5 20H20v-5.5l-2.04 2.04-3.13-3.13z"/>
          </svg>
        </button>
        
        <button id="repeat-btn" class="text-[#a0a0a0] hover:text-white focus:outline-none">
          <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="currentColor">
            <path d="M7 7h10v3l4-4-4-4v3H5v6h2V7zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2v4z"/>
          </svg>
        </button>
      </div>
      
      <!-- Volume control -->
      <div class="flex items-center space-x-2">
        <button id="volume-btn" class="text-[#a0a0a0] hover:text-white focus:outline-none">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
            <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
          </svg>
        </button>
        
        <div class="w-24 h-1 bg-[#333333] relative">
          <input type="range" id="volume-slider" min="0" max="100" value="80" class="absolute inset-0 w-full h-full opacity-0 cursor-pointer z-10">
          <div id="volume-indicator" class="h-full bg-[#8f36e6] dark:bg-[#a3fe0d]" style="width: 80%"></div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Hidden playlist menu -->
  <div id="playlist-container" class="hidden mt-4 max-w-md mx-auto">
    <div class="space-y-1">
      {audioFiles.map((track, index) => (
        <div 
          class={`track-item cursor-pointer py-2 px-3 ${index === 0 ? 'text-[#8f36e6] dark:text-[#a3fe0d]' : 'text-[#a0a0a0]'} hover:bg-[#1d1d1d] flex items-center transition-colors rounded`}
          data-index={index}
          data-file={track.file}
        >
          <span class="track-number w-5 text-right mr-3">{index + 1}</span>
          <span class="track-title truncate">{track.title}</span>
        </div>
      ))}
    </div>
  </div>
  
  <audio id="audio-player" class="hidden"></audio>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const audioPlayer = document.getElementById('audio-player') as HTMLAudioElement;
    const playBtn = document.getElementById('play-btn');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const shuffleBtn = document.getElementById('shuffle-btn');
    const repeatBtn = document.getElementById('repeat-btn');
    const volumeBtn = document.getElementById('volume-btn');
    const playIcon = document.getElementById('play-icon');
    const pauseIcon = document.getElementById('pause-icon');
    const progressBar = document.getElementById('progress-bar') as HTMLInputElement;
    const progressIndicator = document.getElementById('progress-indicator');
    const timeDisplay = document.getElementById('time-display');
    const durationDisplay = document.getElementById('duration-display');
    const currentSong = document.getElementById('current-song');
    const volumeSlider = document.getElementById('volume-slider') as HTMLInputElement;
    const volumeIndicator = document.getElementById('volume-indicator');
    const playlistContainer = document.getElementById('playlist-container');
    const trackItems = document.querySelectorAll('.track-item');
    
    let currentTrackIndex = 0; // Default to the first track
    let isPlaying = false;
    let isShuffleOn = false;
    let isRepeatOn = false;
    
    // Initialize volume
    if (audioPlayer) {
      audioPlayer.volume = 0.8;
    }

    // Load first track by default
    loadTrack(0);
    
    // Toggle play/pause
    if (playBtn) {
      playBtn.addEventListener('click', togglePlay);
    }
    
    // Previous track
    if (prevBtn) {
      prevBtn.addEventListener('click', playPreviousTrack);
    }
    
    // Next track
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        playNextTrack();
      });
    }
    
    // Toggle shuffle
    if (shuffleBtn) {
      shuffleBtn.addEventListener('click', () => {
        isShuffleOn = !isShuffleOn;
        shuffleBtn.classList.toggle('text-[#8f36e6]', isShuffleOn);
        shuffleBtn.classList.toggle('dark:text-[#a3fe0d]', isShuffleOn);
        shuffleBtn.classList.toggle('text-[#a0a0a0]', !isShuffleOn);
      });
    }
    
    // Toggle repeat
    if (repeatBtn) {
      repeatBtn.addEventListener('click', () => {
        isRepeatOn = !isRepeatOn;
        repeatBtn.classList.toggle('text-[#8f36e6]', isRepeatOn);
        repeatBtn.classList.toggle('dark:text-[#a3fe0d]', isRepeatOn);
        repeatBtn.classList.toggle('text-[#a0a0a0]', !isRepeatOn);
      });
    }
    
    // Toggle playlist on volume button
    if (volumeBtn) {
      volumeBtn.addEventListener('click', () => {
        if (playlistContainer) {
          playlistContainer.classList.toggle('hidden');
        }
      });
    }
    
    // Update volume
    if (volumeSlider && volumeIndicator && audioPlayer) {
      volumeSlider.addEventListener('input', () => {
        const volume = volumeSlider.value ? parseInt(volumeSlider.value) / 100 : 0;
        audioPlayer.volume = volume;
        if (volumeIndicator) {
          volumeIndicator.style.width = `${volumeSlider.value}%`;
        }
      });
    }
    
    // Track selection
    trackItems.forEach((item, index) => {
      item.addEventListener('click', () => {
        playTrack(index);
        if (playlistContainer) {
          playlistContainer.classList.add('hidden');
        }
      });
    });
    
    // Update progress bar
    if (audioPlayer) {
      audioPlayer.addEventListener('timeupdate', updateProgress);
      audioPlayer.addEventListener('ended', () => {
        if (isRepeatOn) {
          audioPlayer.currentTime = 0;
          audioPlayer.play().catch(e => console.error(e));
        } else {
          playNextTrack();
        }
      });
      
      audioPlayer.addEventListener('loadedmetadata', () => {
        if (durationDisplay) {
          durationDisplay.textContent = formatTime(audioPlayer.duration);
        }
      });
    }
    
    // Seek functionality
    if (progressBar && audioPlayer) {
      progressBar.addEventListener('input', () => {
        const seekTime = (parseInt(progressBar.value) / 100) * audioPlayer.duration;
        audioPlayer.currentTime = seekTime;
        updateProgressIndicator();
      });
    }

    // Load track without playing
    function loadTrack(index: number): void {
      if (index < 0 || index >= trackItems.length || !audioPlayer) return;
      
      currentTrackIndex = index;
      const trackItem = trackItems[index] as HTMLElement;
      const trackFile = trackItem.getAttribute('data-file');
      
      if (!trackFile) return;
      
      // Update track items visuals
      trackItems.forEach((item, idx) => {
        const element = item as HTMLElement;
        if (idx === index) {
          element.classList.add('text-[#8f36e6]', 'dark:text-[#a3fe0d]');
          element.classList.remove('text-[#a0a0a0]');
        } else {
          element.classList.add('text-[#a0a0a0]');
          element.classList.remove('text-[#8f36e6]', 'dark:text-[#a3fe0d]');
        }
      });
      
      audioPlayer.src = trackFile;
      audioPlayer.load();
      
      // Update song title
      const trackTitle = trackItem.querySelector('.track-title')?.textContent;
      if (currentSong && trackTitle) {
        currentSong.textContent = trackTitle;
      }
    }
    
    function playTrack(index: number): void {
      if (index < 0 || index >= trackItems.length || !audioPlayer) return;
      
      loadTrack(index);
      
      audioPlayer.play()
        .then(() => {
          isPlaying = true;
          updatePlayButton();
        })
        .catch((error: Error) => {
          console.error('Error playing audio:', error);
        });
    }
    
    function togglePlay(): void {
      if (!audioPlayer) return;
      
      if (isPlaying) {
        audioPlayer.pause();
      } else {
        audioPlayer.play().catch((error: Error) => {
          console.error('Error playing audio:', error);
        });
      }
      
      isPlaying = !isPlaying;
      updatePlayButton();
    }
    
    function updatePlayButton(): void {
      if (!playIcon || !pauseIcon) return;
      
      if (isPlaying) {
        playIcon.classList.add('hidden');
        pauseIcon.classList.remove('hidden');
      } else {
        playIcon.classList.remove('hidden');
        pauseIcon.classList.add('hidden');
      }
    }
    
    function updateProgress(): void {
      if (!audioPlayer || !progressBar || !timeDisplay) return;
      
      const duration = audioPlayer.duration || 1;
      const currentTime = audioPlayer.currentTime || 0;
      const progressPercent = (currentTime / duration) * 100;
      
      progressBar.value = progressPercent.toString();
      updateProgressIndicator();
      
      // Update time display
      timeDisplay.textContent = formatTime(currentTime);
    }
    
    function updateProgressIndicator(): void {
      if (!progressIndicator || !progressBar) return;
      progressIndicator.style.width = `${progressBar.value}%`;
    }
    
    function formatTime(seconds: number): string {
      const minutes = Math.floor(seconds / 60);
      const secs = Math.floor(seconds % 60);
      return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
    }
    
    function playNextTrack(): void {
      if (trackItems.length === 0) return;
      
      let nextIndex;
      
      if (isShuffleOn) {
        // Random track excluding current
        let randomIndex;
        do {
          randomIndex = Math.floor(Math.random() * trackItems.length);
        } while (randomIndex === currentTrackIndex && trackItems.length > 1);
        nextIndex = randomIndex;
      } else {
        // Next track or loop back to first
        nextIndex = (currentTrackIndex + 1) % trackItems.length;
      }
      
      playTrack(nextIndex);
    }
    
    function playPreviousTrack(): void {
      if (trackItems.length === 0) return;
      
      // If we're more than 3 seconds in, restart the current track
      if (audioPlayer && audioPlayer.currentTime > 3) {
        audioPlayer.currentTime = 0;
        return;
      }
      
      let prevIndex;
      
      if (isShuffleOn) {
        // Random track excluding current
        let randomIndex;
        do {
          randomIndex = Math.floor(Math.random() * trackItems.length);
        } while (randomIndex === currentTrackIndex && trackItems.length > 1);
        prevIndex = randomIndex;
      } else {
        // Previous track or loop to last
        prevIndex = currentTrackIndex <= 0 ? trackItems.length - 1 : currentTrackIndex - 1;
      }
      
      playTrack(prevIndex);
    }
  });
</script>

<style>
  /* Custom styling for range inputs */
  input[type="range"] {
    -webkit-appearance: none;
    appearance: none;
    background: transparent;
  }
  
  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #8f36e6;
    cursor: pointer;
  }
  
  :global(.dark) input[type="range"]::-webkit-slider-thumb {
    background: #a3fe0d;
  }
  
  input[type="range"]::-moz-range-thumb {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #8f36e6;
    cursor: pointer;
    border: none;
  }
  
  :global(.dark) input[type="range"]::-moz-range-thumb {
    background: #a3fe0d;
  }
</style> 